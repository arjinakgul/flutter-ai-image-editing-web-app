import os
from supabase import create_client, Client
from dotenv import load_dotenv
from typing import Optional, List
from app.models import JobStatus
from app.db_models import JobDB, JobCreate, JobUpdate

load_dotenv()


class Database:
    def __init__(self):
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_key = os.getenv("SUPABASE_KEY")
        if not supabase_url or not supabase_key:
            raise ValueError("SUPABASE_URL and SUPABASE_KEY must be set in environment variables")

        self.client: Client = create_client(supabase_url, supabase_key)
        self.table_name = "jobs"

    async def create_job(
        self,
        prompt: str,
        original_image_url: Optional[str] = None
    ) -> Optional[JobDB]:
        """Create a new job in the database - ID is auto-generated by Supabase"""
        job_create = JobCreate(
            prompt=prompt,
            status=JobStatus.PENDING.value,
            original_image_url=original_image_url
        )

        response = self.client.table(self.table_name).insert(job_create.model_dump(exclude_none=True)).execute()

        if response.data:
            return JobDB(**response.data[0])
        return None

    async def get_job(self, job_id: int) -> Optional[JobDB]:
        """Get a job by ID"""
        response = self.client.table(self.table_name).select("*").eq("id", job_id).execute()

        if response.data:
            return JobDB(**response.data[0])
        return None

    async def update_job(
        self,
        job_id: int,
        status: Optional[JobStatus] = None,
        edited_image_url: Optional[str] = None,
        error_message: Optional[str] = None
    ) -> Optional[JobDB]:
        """Update job status and results"""
        job_update = JobUpdate(
            status=status.value if status else None,
            edited_image_url=edited_image_url,
            error_message=error_message
        )

        response = self.client.table(self.table_name).update(
            job_update.model_dump(exclude_none=True)
        ).eq("id", job_id).execute()

        if response.data:
            return JobDB(**response.data[0])
        return None

    async def get_all_jobs(self, limit: int = 100, offset: int = 0) -> tuple[List[JobDB], int]:
        """Get all jobs with pagination"""
        # Get jobs
        response = self.client.table(self.table_name).select("*").order("created_at", desc=True).range(offset, offset + limit - 1).execute()

        # Get total count
        count_response = self.client.table(self.table_name).select("id", count="exact").execute()
        total = count_response.count if hasattr(count_response, 'count') else len(count_response.data)

        # Convert to JobDB models
        jobs = [JobDB(**job) for job in response.data] if response.data else []

        return jobs, total


# Singleton instance
db = Database()
